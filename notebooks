Exploritory Data Analysis
In this notebook, we will explore the vehicle dataset and try to find some interesting insights.

Importing Libraries
# Import the libraries
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
Loading the Data
# Import the dataset
df = pd.read_csv('../vehicles_us.csv')
Exploring the Data
df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 51525 entries, 0 to 51524
Data columns (total 13 columns):
 #   Column        Non-Null Count  Dtype  
---  ------        --------------  -----  
 0   price         51525 non-null  int64  
 1   model_year    47906 non-null  float64
 2   model         51525 non-null  object 
 3   condition     51525 non-null  object 
 4   cylinders     46265 non-null  float64
 5   fuel          51525 non-null  object 
 6   odometer      43633 non-null  float64
 7   transmission  51525 non-null  object 
 8   type          51525 non-null  object 
 9   paint_color   42258 non-null  object 
 10  is_4wd        25572 non-null  float64
 11  date_posted   51525 non-null  object 
 12  days_listed   51525 non-null  int64  
dtypes: float64(4), int64(2), object(7)
memory usage: 5.1+ MB
# Find the number of missing values in each column
df.isnull().sum()
price               0
model_year       3619
model               0
condition           0
cylinders        5260
fuel                0
odometer         7892
transmission        0
type                0
paint_color      9267
is_4wd          25953
date_posted         0
days_listed         0
dtype: int64
df.head(15)
price	model_year	model	condition	cylinders	fuel	odometer	transmission	type	paint_color	is_4wd	date_posted	days_listed
0	9400	2011.0	bmw x5	good	6.0	gas	145000.0	automatic	SUV	NaN	1.0	2018-06-23	19
1	25500	NaN	ford f-150	good	6.0	gas	88705.0	automatic	pickup	white	1.0	2018-10-19	50
2	5500	2013.0	hyundai sonata	like new	4.0	gas	110000.0	automatic	sedan	red	NaN	2019-02-07	79
3	1500	2003.0	ford f-150	fair	8.0	gas	NaN	automatic	pickup	NaN	NaN	2019-03-22	9
4	14900	2017.0	chrysler 200	excellent	4.0	gas	80903.0	automatic	sedan	black	NaN	2019-04-02	28
5	14990	2014.0	chrysler 300	excellent	6.0	gas	57954.0	automatic	sedan	black	1.0	2018-06-20	15
6	12990	2015.0	toyota camry	excellent	4.0	gas	79212.0	automatic	sedan	white	NaN	2018-12-27	73
7	15990	2013.0	honda pilot	excellent	6.0	gas	109473.0	automatic	SUV	black	1.0	2019-01-07	68
8	11500	2012.0	kia sorento	excellent	4.0	gas	104174.0	automatic	SUV	NaN	1.0	2018-07-16	19
9	9200	2008.0	honda pilot	excellent	NaN	gas	147191.0	automatic	SUV	blue	1.0	2019-02-15	17
10	19500	2011.0	chevrolet silverado 1500	excellent	8.0	gas	128413.0	automatic	pickup	black	1.0	2018-09-17	38
11	8990	2012.0	honda accord	excellent	4.0	gas	111142.0	automatic	sedan	grey	NaN	2019-03-28	29
12	18990	2012.0	ram 1500	excellent	8.0	gas	140742.0	automatic	pickup	NaN	1.0	2019-04-02	37
13	16500	2018.0	hyundai sonata	excellent	4.0	gas	22104.0	automatic	sedan	silver	NaN	2019-01-14	29
14	12990	2009.0	gmc yukon	excellent	8.0	gas	132285.0	automatic	SUV	black	1.0	2019-01-31	24
Data Cleaning
Now we will clean the data and remove the outliers and missing values.

#created a list of all the columes that the missing values in them should be changed to zero and then cast to int
fillna_and_int = ['is_4wd', 'cylinders', 'model_year', 'odometer']
for i in fillna_and_int:
  df[i] = df[i].fillna(0)
  df[i] = df[i].astype(int)

# Fill the missing paint color with unknown
df["paint_color"] = df["paint_color"].fillna("unknown")
  
# Fill the cylinder by finding the same car model from the same year and taking information from there
def cylinder_check(row):
    '''This function will check if the cylinder is missing and if it is it will fill it with the most common cylinder for that car model and year'''
    if row["cylinders"] == 0:
        cylinder = df.loc[df["model"] == row["model"]].loc[df["model_year"] == row["model_year"]]["cylinders"].unique()
        for i in range(len(cylinder)):
            if cylinder[i] != 0:
                return cylinder[i]
    return row["cylinders"]

df["cylinders"] = df.apply(cylinder_check, axis=1)
# Function that fills the odometer values that are equal to zero with the value of the odometer from a similar car
def odometer_check(row):
    '''This function will check if the odometer is missing and if it is it will fill it with the most common odometer for that car model and year'''
    if row["odometer"] == 0:
        odometer = df.loc[df["model"] == row["model"]].loc[df["model_year"] == row["model_year"]].loc[df["type"] == row["type"]]["odometer"].unique()
        for i in range(len(odometer)):
            if odometer[i] != 0:
                return odometer[i]
    return row["odometer"]

df["odometer"] = df.apply(odometer_check, axis=1)
# Function that fills the model year values that are equal to zero with the value of the model year from a similar car
def model_year_check(row):
    '''This function will check if the model year is missing and if it is it will fill it with the most common model year for that car model and year'''
    if row["model_year"] == 0:
        model_year = df.loc[df["model"] == row["model"]].loc[df["type"] == row["type"]]["model_year"].unique()
        for i in range(len(model_year)):
            if model_year[i] != 0:
                return model_year[i]
    return row["model_year"]

df["model_year"] = df.apply(model_year_check, axis=1)
# Function that finds the most common paint color for each model and fill the missing values with it
def paint_color_check(row):
    '''This function will check if the paint color is missing and if it is it will fill it with the most common paint color for that car model'''
    if row["paint_color"] == "unknown":
        paint_color = df.loc[df["model"] == row["model"]]["paint_color"].unique()
        for i in range(len(paint_color)):
            if paint_color[i] != "unknown":
                return paint_color[i]
    return row["paint_color"]

df["paint_color"] = df.apply(paint_color_check, axis=1)
# Extract the manufacturer from the model and store it in a new column
df["manufacturer"] = df["model"].str.split(" ", n = 1, expand = True)[0]
# Extract the model name from the model and store it in a new column
df["model_name"] = df["model"].str.split(" ", n = 1, expand = True)[1]
# Delete the model column
df.drop(columns=["model"], inplace=True)
# Recheck the data
df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 51525 entries, 0 to 51524
Data columns (total 14 columns):
 #   Column        Non-Null Count  Dtype 
---  ------        --------------  ----- 
 0   price         51525 non-null  int64 
 1   model_year    51525 non-null  int64 
 2   condition     51525 non-null  object
 3   cylinders     51525 non-null  int64 
 4   fuel          51525 non-null  object
 5   odometer      51525 non-null  int64 
 6   transmission  51525 non-null  object
 7   type          51525 non-null  object
 8   paint_color   51525 non-null  object
 9   is_4wd        51525 non-null  int32 
 10  date_posted   51525 non-null  object
 11  days_listed   51525 non-null  int64 
 12  manufacturer  51525 non-null  object
 13  model_name    51525 non-null  object
dtypes: int32(1), int64(5), object(8)
memory usage: 5.3+ MB
# Boxplot to check for outliers
fig, ax = plt.subplots(1, 2, figsize=(20, 5))
sns.boxplot(x=df["price"], ax=ax[0])
sns.boxplot(x=df["odometer"], ax=ax[1])
plt.show()

As we can see, there are some outliers in the data. Which could be due to some error in the data collection process. We will remove these outliers.

# Removing the outliers using the IQR method
Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1
df = df[~((df < (Q1 - 1.5 * IQR)) |(df > (Q3 + 1.5 * IQR))).any(axis=1)]
# Change the date posted values type to datatime 
df["date_posted"] = pd.to_datetime(df["date_posted"], format='%Y-%m-%d')
# Recheck the data
df.head(15)
price	model_year	condition	cylinders	fuel	odometer	transmission	type	paint_color	is_4wd	date_posted	days_listed	manufacturer	model_name
0	9400	2011	good	6	gas	145000	automatic	SUV	black	1	2018-06-23	19	bmw	x5
1	25500	2003	good	6	gas	88705	automatic	pickup	white	1	2018-10-19	50	ford	f-150
2	5500	2013	like new	4	gas	110000	automatic	sedan	red	0	2019-02-07	79	hyundai	sonata
3	1500	2003	fair	8	gas	99000	automatic	pickup	white	0	2019-03-22	9	ford	f-150
4	14900	2017	excellent	4	gas	80903	automatic	sedan	black	0	2019-04-02	28	chrysler	200
5	14990	2014	excellent	6	gas	57954	automatic	sedan	black	1	2018-06-20	15	chrysler	300
6	12990	2015	excellent	4	gas	79212	automatic	sedan	white	0	2018-12-27	73	toyota	camry
7	15990	2013	excellent	6	gas	109473	automatic	SUV	black	1	2019-01-07	68	honda	pilot
8	11500	2012	excellent	4	gas	104174	automatic	SUV	brown	1	2018-07-16	19	kia	sorento
9	9200	2008	excellent	6	gas	147191	automatic	SUV	blue	1	2019-02-15	17	honda	pilot
10	19500	2011	excellent	8	gas	128413	automatic	pickup	black	1	2018-09-17	38	chevrolet	silverado 1500
11	8990	2012	excellent	4	gas	111142	automatic	sedan	grey	0	2019-03-28	29	honda	accord
12	18990	2012	excellent	8	gas	140742	automatic	pickup	red	1	2019-04-02	37	ram	1500
13	16500	2018	excellent	4	gas	22104	automatic	sedan	silver	0	2019-01-14	29	hyundai	sonata
14	12990	2009	excellent	8	gas	132285	automatic	SUV	black	1	2019-01-31	24	gmc	yukon
Now that the data is looking good, we will save it to a new file to load into the next file.

# Export the cleaned dataset
df.to_csv('../vehicles_us_cleaned.csv', index=False)
Visualizing the Data
Now that we have cleaned the data, we will visualize it to get some insights.

# Plot histogram of the condition vs year

fig = px.histogram(df, x="model_year", color="condition", hover_data=df.columns)
fig.show()
We can see from the graph above that as the year of the car increases, there are alot more cars in excellent condition.

# Plot the number of cars for each manufacturer
fig = px.histogram(df, x="manufacturer", title="Number of cars for each manufacturer")
fig.show()
As seen above, ford and chevrolet are the most popular brands. While bmw, acura, cadillac, and buick have the least number of cars.

# Plot vehicle type for each manufacturer
fig = px.histogram(df, x="manufacturer", color="type", title="Number of cars for each manufacturer")
fig.show()
